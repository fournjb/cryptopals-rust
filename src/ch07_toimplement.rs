
//fn SBox(byte: u8) {
//  let forward: [u8;256] = [
//    0x63,	0x7c,	0x77,	0x7b,	0xf2,	0x6b,	0x6f,	0xc5,	0x30,	0x01,	0x67,	0x2b,	0xfe,	0xd7,	0xab,	0x76,
//    0xca,	0x82,	0xc9,	0x7d,	0xfa,	0x59,	0x47,	0xf0,	0xad,	0xd4,	0xa2,	0xaf,	0x9c,	0xa4,	0x72,	0xc0,
//    0xb7,	0xfd,	0x93,	0x26,	0x36,	0x3f,	0xf7,	0xcc,	0x34,	0xa5,	0xe5,	0xf1,	0x71,	0xd8,	0x31,	0x15,
//    0x04,	0xc7,	0x23,	0xc3,	0x18,	0x96,	0x05,	0x9a,	0x07,	0x12,	0x80,	0xe2,	0xeb,	0x27,	0xb2,	0x75,
//    0x09,	0x83,	0x2c,	0x1a,	0x1b,	0x6e,	0x5a,	0xa0,	0x52,	0x3b,	0xd6,	0xb3,	0x29,	0xe3,	0x2f,	0x84,
//    0x53,	0xd1,	0x00,	0xed,	0x20,	0xfc,	0xb1,	0x5b,	0x6a,	0xcb,	0xbe,	0x39,	0x4a,	0x4c,	0x58,	0xcf,
//    0xd0,	0xef,	0xaa,	0xfb,	0x43,	0x4d,	0x33,	0x85,	0x45,	0xf9,	0x02,	0x7f,	0x50,	0x3c,	0x9f,	0xa8,
//    0x51,	0xa3,	0x40,	0x8f,	0x92,	0x9d,	0x38,	0xf5,	0xbc,	0xb6,	0xda,	0x21,	0x10,	0xff,	0xf3,	0xd2,
//    0xcd,	0x0c,	0x13,	0xec,	0x5f,	0x97,	0x44,	0x17,	0xc4,	0xa7,	0x7e,	0x3d,	0x64,	0x5d,	0x19,	0x73,
//    0x60,	0x81,	0x4f,	0xdc,	0x22,	0x2a,	0x90,	0x88,	0x46,	0xee,	0xb8,	0x14,	0xde,	0x5e,	0x0b,	0xdb,
//    0xe0,	0x32,	0x3a,	0x0a,	0x49,	0x06,	0x24,	0x5c,	0xc2,	0xd3,	0xac,	0x62,	0x91,	0x95,	0xe4,	0x79,
//    0xe7,	0xc8,	0x37,	0x6d,	0x8d,	0xd5,	0x4e,	0xa9,	0x6c,	0x56,	0xf4,	0xea,	0x65,	0x7a,	0xae,	0x08,
//    0xba,	0x78,	0x25,	0x2e,	0x1c,	0xa6,	0xb4,	0xc6,	0xe8,	0xdd,	0x74,	0x1f,	0x4b,	0xbd,	0x8b,	0x8a,
//    0x70,	0x3e,	0xb5,	0x66,	0x48,	0x03,	0xf6,	0x0e,	0x61,	0x35,	0x57,	0xb9,	0x86,	0xc1,	0x1d,	0x9e,
//    0xe1,	0xf8,	0x98,	0x11,	0x69,	0xd9,	0x8e,	0x94,	0x9b,	0x1e,	0x87,	0xe9,	0xce,	0x55,	0x28,	0xdf,
//    0x8c,	0xa1,	0x89,	0x0d,	0xbf,	0xe6,	0x42,	0x68,	0x41,	0x99,	0x2d,	0x0f,	0xb0,	0x54,	0xbb,	0x16];
//  forward[byte]
//}

static SBOX: [[u8;16];16] = [ [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
                              [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
                              [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
                              [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
                              [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
                              [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
                              [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
                              [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
                              [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
                              [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
                              [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
                              [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
                              [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
                              [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
                              [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
                              [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] ];


//GF FIELD MATH
fn add_gf(a: u8, b:u8) -> u8 {
  a^b
}

fn xtimes(a:u8) -> u8 {
  if (a>>7) == 0 { //double a if it can be safely doubled
    a<<1
  } else { //else, "double" and mod by x^8 polynomial which is irreducible in GF field
    a<<1 ^ 0x1b
  }
}

fn dot(a: u8, b:u8) -> u8 {
  let mut a_new = a;
  let mut total: u8 = 0;
  for i in 0..8 { //8 bits gives 8 values to sum
    if (b>>i)&1 == 1 { //check next bit of i
      total = add_gf(total, a_new); //total += a_new in GF field
    }
    a_new = xtimes(a_new) //increase by x
  }
  total
}


//TURN WORD INTO A MATRIX WITH 4 ROWS
fn to_matrix(a: &[u8]) -> Vec<Vec<u8>> {
  let mut row1: Vec<u8> = Vec::new();
  let mut row2: Vec<u8> = Vec::new();
  let mut row3: Vec<u8> = Vec::new();
  let mut row4: Vec<u8> = Vec::new();
  
  for i in 0..(a.len() / 4) {
      row1.push(a[i*4 + 0]);
      row2.push(a[i*4 + 1]);
      row3.push(a[i*4 + 2]);
      row4.push(a[i*4 + 3]);
  }
  
  [row1, row2, row3, row4].to_vec()
}


//SHIFT ROWS IN MATRIX
fn shift_rows(mut matrix: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
  for i in 0..4 {
      matrix[i].rotate_left(i);
  }
  matrix
}

//MIX COLS IN MATRIX
fn mix_cols(mut m: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
  let a = vec![2,1,1,3];
  

  for c in 0..4 {
      let mut d0 =    dot(m[0][c],2);
      d0 = add_gf(d0, dot(m[1][c],3));
      d0 = add_gf(d0, dot(m[2][c],1));
      d0 = add_gf(d0, dot(m[3][c],1));
      
      let mut d1 =    dot(m[0][c],1);
      d1 = add_gf(d1, dot(m[1][c],2));
      d1 = add_gf(d1, dot(m[2][c],3));
      d1 = add_gf(d1, dot(m[3][c],1));
      
      let mut d2 =    dot(m[0][c],1);
      d2 = add_gf(d2, dot(m[1][c],1));
      d2 = add_gf(d2, dot(m[2][c],2));
      d2 = add_gf(d2, dot(m[3][c],3));
      
      let mut d3 =    dot(m[0][c],3);
      d3 = add_gf(d3, dot(m[1][c],1));
      d3 = add_gf(d3, dot(m[2][c],1));
      d3 = add_gf(d3, dot(m[3][c],2));
      
      m[0][c] = d0;
      m[1][c] = d1;
      m[2][c] = d2;
      m[3][c] = d3;
  }
  
  m
}

//SUB-BYTES
fn sub_bytes(mut m: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
  for r in 0..4 {
    for c in 0..4 {
      //m[r][c] in form xy
      let s_box_row = (m[r][c] & 0xF0)>>4;
      let s_box_col = m[r][c] & 0x0F;
      m[r][c] = SBOX[s_box_row as usize][s_box_col as usize]
    }
  }
  m
}


//GET NEXT ROUND KEY
fn rot_word(mut word: Vec<u8>) -> Vec<u8> {
  word.rotate_left(1);
  word
}

fn sub_word(mut word: Vec<u8>) -> Vec<u8> {
  for r in 0..4 {
    let s_box_row = (word[r] & 0xF0)>>4;
    let s_box_col = word[r] & 0x0F;
    word[r] = SBOX[s_box_row as usize][s_box_col as usize]
  }
  word
}

static RCON: [u8; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

fn xor_rcon(mut word: Vec<u8>) -> Vec<u8> {
  word[0] = word[0] ^ RCON[0];
  word
}

//fn next_round_key(mut k: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
//  
//  let mut w0 = [k[0][0], k[1][0], k[2][0], k[3][0]].to_vec();
//  let mut w1 = [k[0][1], k[1][1], k[2][1], k[3][1]].to_vec();
//  let mut w2 = [k[0][2], k[1][2], k[2][2], k[3][2]].to_vec();
//  let mut w3 = [k[0][3], k[1][3], k[2][3], k[3][3]].to_vec();
//
//  let mut w4 = rot_word(w3);
//  w4 = sub_word(w4);
//  w4 = xor_rcon(w4);
//  w4 = add_gf(w4, w0)
//
//  let w5 = add_gf(w4, w1);
//  let w6 = add_gf(w5, w2);
//  let w7 = add_gf(w6, w3);
//
//
//
//}

fn key_expansion(mut k: Vec<u8>) {
  //let mut w0: u32 = ((k[0]  as u32) << 24) & ((k[1] as u32) << 16) & ((k[2]  as u32) << 8) & ((k[3]  as u32) << 0);
  //let mut w1: u32 = ((k[4]  as u32) << 24) & ((k[5] as u32) << 16) & ((k[6]  as u32) << 8) & ((k[7]  as u32) << 0);
  //let mut w2: u32 = ((k[8]  as u32) << 24) & ((k[9] as u32) << 16) & ((k[10] as u32) << 8) & ((k[11] as u32) << 0);
  //let mut w3: u32 = ((k[12] as u32) << 24) & ((k[13]as u32) << 16) & ((k[14] as u32) << 8) & ((k[15] as u32) << 0);


  //let w0 = k[0..4].to_vec();
  //let w1 = k[4..8].to_vec();
  //let w2 = k[8..12].to_vec();
  //let w3 = k[12..16].to_vec();
//
  //let temp = w3;
  //temp = rot_word(temp);
  //temp = sub_bytes(temp)
  //temp[0] = temp[0] ^ 0x01;
  //
  //let w4: Vec<u8> = Vec::new();
  //for l in 0..4 { //4 bytes (letters) in word
  //  w4.push(temp[l] ^ w0[l])
  //}
  //
  //let w5: Vec<u8> = Vec::new();
  //for l in 0..4 { //4 bytes (letters) in word
  //  w5.push(w4[l] ^ w1[l])
  //}
  //
  //let w6: Vec<u8> = Vec::new();
  //for l in 0..4 { //4 bytes (letters) in word
  //  w6.push(w5[l] ^ w2[l])
  //}
  //
  //let w7: Vec<u8> = Vec::new();
  //for l in 0..4 { //4 bytes (letters) in word
  //  w7.push(w6[l] ^ w3[l])
  //}




  //let mut w4 = ((w0<<8)&(w0>>24)); //rotword
  
  //let b0 = (w4 >> 24) & 0xFF;
  //let b1 = (w4 >> 16) & 0xFF;
  //let b2 = (w4 >>  8) & 0xFF;
  //let b3 = (w4 >>  0) & 0xFF;

  //let l0 = SBOX[(b0 & 0xF0) as usize][(b0 & 0x0F) as usize];
  //let l1 = SBOX[(b0 & 0xF0) as usize][(b0 & 0x0F) as usize];
  //let l2 = SBOX[(b0 & 0xF0) as usize][(b0 & 0x0F) as usize];
  //let l3 = SBOX[(b0 & 0xF0) as usize][(b0 & 0x0F) as usize];
  //
  //
  //l0 = SBOX[((w4 & (0xF0 << 24)) >> 24) as usize][((w4 & (0x0F << 24)) >> 24) as usize] as u32;
  //l1 = SBOX[((w4 & (0xF0 << 16)) >> 16) as usize][((w4 & (0x0F << 16)) >> 16) as usize] as u32;
  //l2 = SBOX[((w4 & (0xF0 <<  8)) >>  8) as usize][((w4 & (0x0F << 8 )) >>  8) as usize] as u32;
  //l3 = SBOX[((w4 & (0xF0 <<  0)) >>  0) as usize][((w4 & (0x0F << 0 )) >>  0) as usize] as u32;
  //
  //w4 = (l0 << 24) & (l1 << 16) & (l2 << 8) & (l3 << 0);
//
  //
  //SBOX[w4&(0xF0<<4)][w4&(0x0F<<4)]
  //SBOX[w4&(0xF0<<2)][w4&(0x0F<<2)]
  //SBOX[w4&(0xF0<<0)][w4&(0x0F<<0)]
//
  //let w5 = add_gf(w1, w4);
  //let w6 = add_gf(w2, w5);
  //let w7 = add_gf(w3, w6); 
//
  //let mut w4 = 
}

//APPLY KEY
fn apply_round_key (mut m: Vec<Vec<u8>>, k: Vec<Vec<u8>>) -> Vec<Vec<u8>> {
  for r in 0..4 {
    for c in 0..4 {
      m[r][c] = m[r][c] ^ k[r][c];
    }
  }
  m
}


pub fn print() {
  //GF FIELD MATH TEST
  //println!("{:?}", dot(0x57,0x13)); //expect 0xfe
  //println!("{:?}", dot(0x13,0x57)); //expect 0xfe

  
 // println!("{:?}", to_matrix("YELLOW SUBMARINE".as_bytes())); //expect [[89, 79, 85, 82], [69, 87, 66, 73], [76, 32, 77, 78], [76, 83, 65, 69]]
  //println!("{:?}", shift_rows(to_matrix("YELLOW SUBMARINE".as_bytes()))); //expect [[89, 79, 85, 82], [69, 87, 66, 73], [76, 32, 77, 78], [76, 83, 65, 69]]
  
  let input: [u8; 16] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34];
  println!("Inp: {:?}", input.clone());
  
  let key: [u8; 16] =   [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
  println!("Key: {:?}", key.clone());

  //let start = [[0x19,0xa0,0x9a,0xe9].to_vec(),[0x3d,0xf4,0xc6,0xf8].to_vec(),[0xe3,0xe2,0x8d,0x48].to_vec(),[0xbe,0x2b,0x2a,0x08].to_vec()].to_vec();
  let start: Vec<Vec<u8>> = apply_round_key(to_matrix(&input), to_matrix(&key));
  println!("Sta: {:?}", start.clone());


  println!("Sub: {:?}", sub_bytes(start.clone()));
  //let start = [[0x19,0xa0,0x9a,0xe9].to_vec(),[0x3d,0xf4,0xc9,0xf8].to_vec(),[0xe3,0xe2,0x8d,0x48].to_vec(),[0xbe,0x2b,0x2a,0x08].to_vec()].to_vec();
  println!("Sft: {:?}", shift_rows(sub_bytes(start.clone())));


  let s = [
    [0xd4,0xe0,0xb8,0x1e].to_vec(),
    [0xbf,0xb4,0x41,0x27].to_vec(),
    [0x5d,0x52,0x11,0x98].to_vec(),
    [0x30,0xae,0xf1,0xe5].to_vec()
    ].to_vec();
  //println!("Exp: {:?}", s.clone());
  //println!("{:?}", mix_cols(s));

  //let start = [[0x19,0xa0,0x9a,0xe9].to_vec(),[0x3d,0xf4,0xc9,0xf8].to_vec(),[0xe3,0xe2,0x8d,0x48].to_vec(),[0xbe,0x2b,0x2a,0x08].to_vec()].to_vec();
  println!("Col: {:?}", mix_cols(shift_rows(sub_bytes(start.clone()))));

  let mut x = SBOX[0][0];
  let mut ct = 1;
  while x != SBOX[0][0] {
    println!("{}: {} {}", ct, x, x==0);
    x = SBOX[(x>>4) as usize][(x&0x0F) as usize];
    ct += 1;
  }


}